name: Build APK Kustom via Web

on:
  workflow_dispatch:
    inputs:
      app_id:
        description: 'New Application ID (e.g. com.example.newapp)'
        required: true
        default: 'ojgrup'
      app_name:
        description: 'New Application Name'
        required: true
        default: 'My App Name'
      main_url:
        description: 'New Main URL (e.g. https://newsite.com)'
        required: true
        default: 'https://facebook.com'
      icon_url:
        description: 'URL for New Icon File (PNG/JPEG)'
        required: true
        default: 'https://placehold.co/512x512.png'

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write # IZIN KRUSIAL: Dibutuhkan untuk membuat Release
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    # 1. SETUP JAVA DAN SDK
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'gradle'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 'latest' 
        
    - name: Fix make.sh cmdline-tools path
      run: |
        mkdir -p ./cmdline-tools
        if [ -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
          ln -s "$ANDROID_SDK_ROOT/cmdline-tools/latest" ./cmdline-tools
        else
          ln -s "$ANDROID_SDK_ROOT/cmdline-tools" ./cmdline-tools
        fi
        
    - name: Make make.sh Executable and gradlew Executable
      run: |
        chmod +x make.sh
        chmod +x gradlew

    # 2. ENVIRONMENT SIGNING
    - name: Set Keystore Environment Variables
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        echo "KEYSTORE_PASS=$KEYSTORE_PASSWORD" >> $GITHUB_ENV
        echo "KEY_ALIAS=$KEY_ALIAS" >> $GITHUB_ENV
        echo "KEY_PASS=$KEY_PASSWORD" >> $GITHUB_ENV
        
    # 3. DOWNLOAD ICON BARU
    - name: Download New Icon from URL
      env:
        ICON_URL: ${{ github.event.inputs.icon_url }}
        ICON_PATH: app/example.png
      run: |
        echo "Downloading icon from: $ICON_URL"
        wget -q -O $ICON_PATH $ICON_URL
        if [ ! -s $ICON_PATH ]; then
          echo "ERROR: Downloaded icon file is empty or download failed."
          exit 1
        fi

    # 4. MENGGANTI KONFIGURASI DI webapk.conf (PERBAIKAN SED SINTAKSIS)
    - name: Apply Custom Configuration (Update webapk.conf)
      env:
        NEW_ID: ${{ github.event.inputs.app_id }}
        NEW_NAME: ${{ github.event.inputs.app_name }}
        NEW_URL: ${{ github.event.inputs.main_url }}
        ICON_PATH: app/example.png
      run: |
        echo "Updating webapk.conf..."
        
        # PERBAIKAN: Menggunakan pemisah '|' untuk menghindari error pada URL.
        sed -i "s|id = .*|id = $NEW_ID|" webapk.conf
        sed -i "s|name = .*|name = $NEW_NAME|" webapk.conf
        sed -i "s|mainURL = .*|mainURL = $NEW_URL|" webapk.conf
        sed -i "s|icon = .*|icon = $ICON_PATH|" webapk.conf
        
        # Mengunci requireDoubleBackToExit ke 'true'
        sed -i "s|requireDoubleBackToExit = .*|requireDoubleBackToExit = true|" webapk.conf
        
        echo "--- webapk.conf Baru ---"
        cat webapk.conf

    # 5. KEYGEN & APPLY CONFIG
    - name: Run make.sh keygen (Creates my-release-key.jks)
      run: ./make.sh keygen
      
    - name: Run make.sh apply_config
      run: ./make.sh apply_config 

    # 6. BUILD
    - name: Build Release (APK and AAB)
      run: ./gradlew :app:assembleRelease :app:bundleRelease

    # 7. FIND ARTIFACTS (Perbaikan Pencarian yang Lebih Fleksibel)
    - name: Find Build Artifacts
      id: find-artifacts
      run: |
        BUILD_DIR="${{ github.workspace }}/app/build"
        
        # Coba cari APK di outputs/apk/release/
        APK_PATH=$(find "$BUILD_DIR" -name "*release.apk" -type f | head -n 1)
        
        if [ -z "$APK_PATH" ]; then
          echo "WARNING: Standard *release.apk not found. Trying wider search."
          # Coba cari file .apk lain di outputs/apk/ yang bukan debug
          APK_PATH=$(find "$BUILD_DIR/outputs/apk" -name "*.apk" -type f | grep -v 'debug' | head -n 1)
        fi

        if [ -z "$APK_PATH" ]; then
          echo "ERROR: Final release APK file could not be found."
          exit 1
        fi

        echo "APK file found: $APK_PATH"
        echo "APK_FILE_NAME=$(basename $APK_PATH)" >> $GITHUB_ENV
        echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT 

    # 8. BUAT GITHUB RELEASE BARU DAN UPLOAD APK
    - name: Create Release and Upload APK
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.app_id }}-${{ github.sha }} 
        name: Build Kustom - ${{ github.event.inputs.app_name }}
        draft: false
        prerelease: false
        files: ${{ steps.find-artifacts.outputs.apk_path }}
