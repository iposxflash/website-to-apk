# .github/workflows/android.yml
name: Build Android APK from Website (Dynamic Keygen)

on:
  # Memungkinkan pemicuan manual dari antarmuka web GitHub Actions
  workflow_dispatch:
    inputs:
      # PERINGATAN: Input ini akan terekspos di log workflow!
      store_pass:
        description: 'Keystore Password (storepass)'
        required: true
        default: '123456'
      key_pass:
        description: 'Key Password (keypass) [Kosongkan jika sama dengan Storepass]'
        required: false
        default: '' # Jika kosong, make.sh akan menggunakan store_pass
        
      # Input Keystore DNAME (Detail Pengembang)
      keystore_dname:
        description: 'Detail Keystore DNAME (Contoh: CN=Name,OU=Unit,O=Org,L=City,S=State,C=ID)'
        required: true
        default: 'CN=My App Developer,O=MyCorp,C=US'
      
      # Input untuk Aplikasi (akan digunakan oleh apply_config di make.sh)
      website_url:
        description: 'URL Website yang akan dijadikan APK (Harus HTTPS)'
        required: true
        default: 'https://mysite.id'
      app_name:
        description: 'Nama Tampilan Aplikasi (App Name)'
        required: true
        default: 'Web APK Builder'
        
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # 1. Siapkan Environment Variables dan Konfigurasi File
      - name: Setup Dynamic Variables and Config File
        run: |
          # 1a. Siapkan variabel lingkungan untuk keygen di make.sh (TERMASUK PASSWORD)
          echo "KEYSTORE_STORE_PASS=${{ github.event.inputs.store_pass }}" >> $GITHUB_ENV
          
          # Jika key_pass diisi, gunakan; jika tidak, biarkan make.sh menggunakan store_pass
          if [ -n "${{ github.event.inputs.key_pass }}" ]; then
            echo "KEYSTORE_KEY_PASS=${{ github.event.inputs.key_pass }}" >> $GITHUB_ENV
          fi
          
          # Siapkan DNAME
          echo "KEYSTORE_DNAME_INFO=${{ github.event.inputs.keystore_dname }}" >> $GITHUB_ENV
          
          # 1b. Buat file konfigurasi (misalnya webapk.conf) dari input
          # make.sh akan membaca file ini melalui apply_config
          echo "url=${{ github.event.inputs.website_url }}" > webapk.conf
          echo "name=${{ github.event.inputs.app_name }}" >> webapk.conf
          # Tambahkan konfigurasi lain di sini jika make.sh memerlukannya
          
          echo "Konfigurasi dan variabel keygen telah disiapkan."

      # 2. Grant Execute Permission dan Panggil keygen
      - name: Generate Keystore
        run: |
          chmod +x make.sh
          # Memanggil keygen. Script akan menggunakan variabel lingkungan yang di-set di atas
          ./make.sh keygen
          
      # 3. Setup Lingkungan Build (Java dan Android SDK)
      - name: Setup Java 17 and Android SDK
        # make.sh Anda memiliki logika untuk mendownload/menyiapkan ini.
        # Jika Anda ingin menggunakan GitHub Actions bawaan, gunakan actions/setup-java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
          
      # 4. Lanjutkan Proses Build dengan Konfigurasi Dinamis
      - name: Build and Sign APK
        # Memanggil make.sh build dengan file webapk.conf yang dibuat dinamis
        run: ./make.sh build webapk.conf

      # 5. Upload APK (Hasil Build)
      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.app_name }}-release-apk
          path: app/build/outputs/apk/release/app-release-unsigned.apk # Ganti dengan path APK rilis yang benar
